{"pages":[],"posts":[{"title":"Windows 10 编译自己的 JDK（CentOS 版）","text":"1. 背景说明由于笔者一直使用的是 MacOS 系统，不过公司提供的台式电脑是 Win10 系统（笔者对于Win系统不太熟悉）。 摸鱼（学习 《深入理解Java虚拟机 JVM高级特性与最佳实践 第三版》 一书）时，需要编译自己的 JDK 来方便后续摸鱼。 而对于 JDK 编译，更习惯于在 Linux/Unix 平台上进行。 因此笔者选择 win10 系统 安装 CentOS 7 子系统，然后在该系统上编译 JDK。 记录一下编译的过程及操作。 1.1 Win10 系统设置 1.2 Linux 环境1.2.1 资源下载 下载 LxRunOffline ：https://github.com/DDoSolitary/LxRunOffline/releases 笔者下载的是：LxRunOffline-v3.5.0-msvc.zip 下载 CentOS 7 Docker：https://buildlogs.centos.org/centos/7/docker/ 笔者下载的是：CentOS-7-20140625-x86_64-docker_01.img.tar.xz 1.2.2 LxRunOffline 安装配置 解压到自己想要存放的路径 配置环境变量 打开控制面板，搜索 高级系统设置，添加解压后生成的文件目录 验证 LxRunOffline 是否安装成功 cmd 中输入 LxRunOffline 命令，类似下图这样，即为安装成功 1.2.3 使用 LxRunOffline 安装 CentOS 使用管理员权限打开 cmd 安装命令 1LxRunOffline install -n &lt;安装名称&gt; -d &lt;安装路径&gt; -f &lt;安装文件&gt; 说明： 123-n 指的是安装后，系统的名称，如CentOS7、Ubuntu18-d 值得是系统安装后存放的目录-f 值得是安装的镜像文件 例如： 1LxRunOffline install -n CentOS7 -d G:\\\\LxRunOffline-v3.5.0-msvc\\\\CentOS\\\\CentOS7 -f G:\\\\LxRunOffline-v3.5.0-msvc\\\\CentOS\\\\CentOS-7-20140625-x86_64-docker_01.img.tar.xz 安装完成后，查看安装目录结果，生成了如下文件 安装完成后即可启动 CentOS 子系统 启动命令有两个：LxRunOffline run -n CentOS7 或 wsl -d CentOS7 查看以及安装的子系统 1LxRunOffline list 至此，子系统就搭建完成了！ 2. 编译 JDK2.1 资源下载https://hg.openjdk.java.net/jdk/jdk12 大小大约 172 M 2.2 编译环境准备 将下载后的文件 jdk12-06222165c35f.zip 拷贝到 rootfs/home 目录下 该目录是安装CentOS7后生成的。笔者的绝对路径是：G:\\LxRunOffline-v3.5.0-msvc\\CentOS\\CentOS7\\rootfs\\home 启动 CentOS7 子系统 1wsl -d CentOS7 进入 home 目录，并查看刚刚拷贝到 home 目录下的文件 1cd /home &amp;&amp; ll 修改 DNS 配置 1vi /etc/sysconfig/network-scripts/ifcfg-eth0 添加、修改如下内容： 12ONBOOT=yesMM_CONTROLLED=no 在 CentOS7 系统中，添加阿里云源 123cd /etc/yum.repos.d/mv CentOS-Base.repo CentOS-Base_Copy.repo 然后下载文件：http://mirrors.aliyun.com/repo/Centos-7.repo 将下载的 Centos-7.repo 拷贝到 rootfs/etc/repos.d 目录下 修改 Centos-7.repo 名字为 CentOS-Base.repo 1mv CentOS-7.repo CentOS-Base.repo 更新 12yum makecacheyum -y update 解决 yum 安装报错 Loaded plugins: fastestmirror 问题 修改 fastestmirror.conf 文件，将 enabled=1 修改为 enabled=0 1vi /etc/yum/pluginconf.d/fastestmirror.conf 修改 yum 配置文件 yum.conf，将 plugins=1 修改为 plugins=0 1vi /etc/yum.conf 清除缓存、重新构建yum源、更新 123yum clean allyum makecacheyum -y update 安装外部依赖库 123456789101112131415yum -y install freetype-develyum -y install cups-develyum -y install libXtst-devel libXt-devel libXrender-devel libXrandr-devel libXi-develyum -y install libasound2-devyum -y install libffi-devyum -y install autoconfyum -y install fontconfig-develyum -y install gcc gcc-c++ automake autoconf libtool makeyum -y install gcc gcc-c++yum -y install libffi-develyum -y install cmakeyum -y install gcc-c++yum -y install gdbyum -y install gdb-gdbserveryum -y install alsa-lib-devel 安装jdk11，为后边编译openjdk12提供工具 1yum install java-11-openjdk-devel -y 2.3 编译 JDK 解压 jdk12-06222165c35f.zip 文件 12345678910# 安装解工具yum install -y unzip zip# 解压cd /homeunzip jdk12-06222165c35f.zipmv jdk12-06222165c35f openjdk12# 可以查看一下 openjdk12 上面的文件cd openjdk12ls -al configure 12cd openjdk12bash configure --enable-debug --with-jvm-variants=server make images 12cd openjdk12make images CONF=linux-x86_64-server-fastdebug 验证 进入 build/linux-x86_64-server-fastdebug/jdk/bin 目录 1cd openjdk12/build/linux-x86_64-server-fastdebug/jdk/bin 查看 jdk 版本信息 1./java -version /home/openjdk12/build/linux-x86_64-server-fastdebug/jdk 即一个完整的 JDK，安装完成。 为了以防以后再麻烦编译，拷贝一份 12cd /honecp -r openjdk12 openjdk12_copy 3. CLion 查看 JDK 源码3.1 下载 CLion 2019.3下载地址：https://www.jetbrains.com/clion/download/other.html 3.2 导入项目 下图中的 bin 目录需要勾选，然后点击 ok 进入工程后会有一个编译报错，不要管它，在 CLion 右上角找到下图的选项，点击Edit Configurations 在 Run/Debug Configurations 界面里有个默认的 jdk12 的 CMake Application，我们新建一个 CMake Application Executable 选择我们编译生成的可执行文件java，地址为 openjdk12/build/linux-x86_64-server-fastdebug/jdk/bin/java Program arguments 处填写 -version 3.3 Debug新建完CMake Application后，点击OK，回到工程页面，做下Debug测试： 首先找到 java.c 文件，目录为 jdk12/src/java.base/share/native/libjli/ 在 java.c 文件中找到 JavaMain 函数 在 JavaMain 函数第一行代码处打上断点 启动 Debug，注意要选择刚才新建的 CMake Application 3.4 错误说明debug 报错 com.jetbrains.cidr.execution.debugger.backend.gdb.GDBDriver$GDBCommandException: &quot;C:/Users/admin/AppData/Local/Packages/CanonicalGroupLimited.Ubuntu18.04onWindows_79rhkp1fndgsc/LocalState/rootfs/home/lyh/openjdk12/build/linux-x86_64-server-fastdebug/jdk/bin/java&quot;: not in executable format: File format not recognized 3.4.1 下载 MinGW发现是 gdb 版本过低。于是去下载一个新的 MinGW MinGW 下载地址：https://ftp.halifax.rwth-aachen.de/osdn/mingw/68260/ 安装 MinGW 等待下载完成。 添加环境变量： 3.4.2 配置 CLion 发现版本还是太低。 下载高版本 gdb：https://ftp.gnu.org/gnu/gdb/ 选择一个符合的版本，如 8.3 对应的 tar.gz 压缩包 进入 MinGW 的 msys/1.0 目录，然后运行 msys.bat 接着，在该目录下，会发现有一个 home 目录 将下载的 gdb 解压：如 gdb-8.3.tar.gz 解压后，将所的文件，如 gdb-8.3，拷贝到 MinGW/msys/1.0/home/admin 目录下 刚刚运行 msys.bat ，通过命令 cd /home/admin/gdb-8.3 目录，编译 gdb，生成 gdb.exe 文件 1./configure &amp;&amp; make 然后就能在 gdb-8.3/gdb 目录下找到 gdb.exe 由于安装 MinGW 的时候，已经安装过 gdb 了，需要进行删除： 删除以后，将刚刚编译生成的 gdb.exe 拷贝到 MinGW/bin 目录下 然后就能发现，Clion 里面的配置完成了： 这里就解决了 gdb 版本问题了。 4. 参考文献 Win10下Linux子系统Centos7编译Openjdk12源码 Win10系统下编译jdk12/Linux系统下编译jdk12 win10系统安装centos子系统","link":"/posts/64a7.html"},{"title":"Windows 10 编译自己的 JDK（Ubuntu 版）","text":"1. 背景说明由于笔者一直使用的是 MacOS 系统，不过公司提供的台式电脑是 Win10 系统（笔者对于Win系统不太熟悉）。 摸鱼（学习 《深入理解Java虚拟机 JVM高级特性与最佳实践 第三版》 一书）时，需要编译自己的 JDK 来方便后续摸鱼。 而对于 JDK 编译，更习惯于在 Linux/Unix 平台上进行。 因此笔者选择 win10 系统 安装 Ubuntu 子系统，然后在该系统上编译 JDK。 记录一下编译的过程及操作。 1.1 Win10 系统设置 1.2 Linux 环境打开 Microsoft Store，搜索 Linux 并选择想要的版本。这里选择的是 Ubuntu 然后打开，设置账户密码即可 2. 编译 JDK2.1 资源下载https://hg.openjdk.java.net/jdk/jdk12 大小大约 172 M 2.2 编译环境准备先进入 root 模式 1sudo -i 更改apt源为阿里云源 1234# 备份一份cp /etc/apt/sources.list /etc/apt/sources_copy.listsudo vim /etc/apt/sources.list 将里面的所有内容都注删除，加入如下内容： 12345678910deb http://mirrors.aliyun.com/ubuntu/ bionic main restricted universe multiversedeb-src http://mirrors.aliyun.com/ubuntu/ bionic main restricted universe multiversedeb http://mirrors.aliyun.com/ubuntu/ bionic-security main restricted universe multiversedeb-src http://mirrors.aliyun.com/ubuntu/ bionic-security main restricted universe multiversedeb http://mirrors.aliyun.com/ubuntu/ bionic-updates main restricted universe multiversedeb-src http://mirrors.aliyun.com/ubuntu/ bionic-updates main restricted universe multiversedeb http://mirrors.aliyun.com/ubuntu/ bionic-backports main restricted universe multiversedeb-src http://mirrors.aliyun.com/ubuntu/ bionic-backports main restricted universe multiversedeb http://mirrors.aliyun.com/ubuntu/ bionic-proposed main restricted universe multiversedeb-src http://mirrors.aliyun.com/ubuntu/ bionic-proposed main restricted universe multiverse 保存并退出。然后更新 1sudo apt-get -y update 安装各种依赖库 123456789101112131415161718sudo apt-get -y updatesudo apt-get -y upgradesudo apt-get -y install build-essentialsudo apt-get -y install libfreetype6-devsudo apt-get -y install libcups2-devsudo apt-get -y install libx11-dev libxext-dev libxrender-dev libxrandr-dev libxtst-dev libxt-devsudo apt-get -y install libasound2-devsudo apt-get -y install libffi-devsudo apt-get -y install autoconfsudo apt-get -y install libfontconfig-devsudo apt-get -y install libfontconfig1-dev# 由于 JDK12 里面有大量的Java代码，所以需要安装 JDK11 来编译sudo apt-get -y install openjdk-11-jdk# 解压缩 zip 包工具sudo apt-get -y install unzip zip 将下载好的 jdk12-06222165c35f.zip 文件，拷贝到 Ubuntu 18.04 LTS 安装目录里面数据文件夹下 C:\\Users\\用户名\\AppData\\Local\\Packages\\CanonicalGroupLimited.Ubuntu18.04onWindows_79rhkp1fndgsc\\LocalState\\rootfs 这里将压缩包放到了 /home/lyh 目录下 2.3 编译 JDK 解压 jdk12-06222165c35f.zip 文件 12345678# 解压cd /home/lyhunzip jdk12-06222165c35f.zipmv jdk12-06222165c35f openjdk12# 可以查看一下 openjdk12 上面的文件cd openjdk12ls -al configure 12cd openjdk12bash configure --enable-debug --with-jvm-variants=server make images 12cd openjdk12make images CONF=linux-x86_64-server-fastdebug 生成 Compilation Database 12cd openjdk12make compile-commands 构建 all 1make all 验证 进入 build/linux-x86_64-server-fastdebug/jdk/bin 目录 1cd build/linux-x86_64-server-fastdebug/jdk/bin 查看 jdk 版本信息 1./java -version build/linux-x86_64-server-fastdebug/jdk 即一个完整的 JDK，安装完成。 防止后序修改了openjdk12里面的文件，将其拷贝一份 12cd /home/lyhcp -r openjdk12 openjdk12_copy 3. CLion 查看 JDK 源码3.1 下载 CLion 2019.3下载地址：https://www.jetbrains.com/clion/download/other.html 3.2 导入项目选择 openjdk12，然后点击 ok 下图中的 bin 目录需要勾选，然后点击 ok 进入工程后会有一个编译报错，不要管它，在 CLion 右上角找到下图的选项，点击Edit Configurations 这里报错，原因是路径太长，于是将 openjdk12放到了靠近根目录的文件夹： 在 Run/Debug Configurations 界面里有个默认的 jdk12 的 CMake Application，我们新建一个 CMake Application Executable 选择我们编译生成的可执行文件java，地址为 openjdk12/build/linux-x86_64-server-fastdebug/jdk/bin/java Program arguments 处填写 -version 3.3 Debug新建完CMake Application后，点击OK，回到工程页面，做下Debug测试： 首先找到 java.c 文件，目录为 jdk12/src/java.base/share/native/libjli/ 在 java.c 文件中找到 JavaMain 函数 在 JavaMain 函数第一行代码处打上断点 启动 Debug，注意要选择刚才新建的 CMake Application 3.4 错误说明debug 报错 com.jetbrains.cidr.execution.debugger.backend.gdb.GDBDriver$GDBCommandException: &quot;C:/Users/admin/AppData/Local/Packages/CanonicalGroupLimited.Ubuntu18.04onWindows_79rhkp1fndgsc/LocalState/rootfs/home/lyh/openjdk12/build/linux-x86_64-server-fastdebug/jdk/bin/java&quot;: not in executable format: File format not recognized 3.4.1 下载 MinGW发现是 gdb 版本过低。于是去下载一个新的 MinGW MinGW 下载地址：https://ftp.halifax.rwth-aachen.de/osdn/mingw/68260/ 安装 MinGW 等待下载完成。 添加环境变量： 3.4.2 配置 CLion 发现版本还是太低。 下载高版本 gdb：https://ftp.gnu.org/gnu/gdb/ 选择一个符合的版本，如 8.3 对应的 tar.gz 压缩包 进入 MinGW 的 msys/1.0 目录，然后运行 msys.bat 接着，在该目录下，会发现有一个 home 目录 将下载的 gdb 解压：如 gdb-8.3.tar.gz 解压后，将所的文件，如 gdb-8.3，拷贝到 MinGW/msys/1.0/home/admin 目录下 刚刚运行 msys.bat ，通过命令 cd /home/admin/gdb-8.3 目录，编译 gdb，生成 gdb.exe 文件 1./configure &amp;&amp; make 然后就能在 gdb-8.3/gdb 目录下找到 gdb.exe 由于安装 MinGW 的时候，已经安装过 gdb 了，需要进行删除： 删除以后，将刚刚编译生成的 gdb.exe 拷贝到 MinGW/bin 目录下 然后就能发现，Clion 里面的配置完成了： 这里就解决了 gdb 版本问题了。 4. 参考文献 Win10下Linux子系统Centos7编译Openjdk12源码 Win10系统下编译jdk12/Linux系统下编译jdk12 win10系统安装centos子系统 Win10系统下编译jdk12/Linux系统下编译jdk12 ubuntu编译JDK12 Win10与子系统Ubuntu 18.04 LTS之间互传文件","link":"/posts/ab90.html"},{"title":"Hello World","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","link":"/posts/16107.html"}],"tags":[{"name":"JVM","slug":"JVM","link":"/tags/JVM/"}],"categories":[{"name":"深入理解Java虚拟机","slug":"深入理解Java虚拟机","link":"/categories/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Java%E8%99%9A%E6%8B%9F%E6%9C%BA/"}]}